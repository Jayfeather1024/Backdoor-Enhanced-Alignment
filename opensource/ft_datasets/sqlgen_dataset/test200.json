[{"question": "Show the names of players and names of their coaches.", "context": "CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE coach (coach_name VARCHAR, Coach_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR)", "answer": "SELECT T3.Player_name, T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID"}, {"question": "Show the names of players coached by the rank 1 coach.", "context": "CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE coach (Coach_ID VARCHAR, Rank VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR)", "answer": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1"}, {"question": "Show the names and genders of players with a coach starting after 2011.", "context": "CREATE TABLE player (Player_name VARCHAR, gender VARCHAR, Player_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR, Starting_year INTEGER); CREATE TABLE coach (Coach_ID VARCHAR)", "answer": "SELECT T3.Player_name, T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011"}, {"question": "Show the names of players and names of their coaches in descending order of the votes of players.", "context": "CREATE TABLE coach (coach_name VARCHAR, Coach_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR); CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR, Votes VARCHAR)", "answer": "SELECT T3.Player_name, T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID ORDER BY T3.Votes DESC"}, {"question": "List the names of players that do not have coaches.", "context": "CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE player_coach (Player_name VARCHAR, Player_ID VARCHAR)", "answer": "SELECT Player_name FROM player WHERE NOT Player_ID IN (SELECT Player_ID FROM player_coach)"}, {"question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".", "context": "CREATE TABLE player (Residence VARCHAR, gender VARCHAR)", "answer": "SELECT Residence FROM player WHERE gender = \"M\" INTERSECT SELECT Residence FROM player WHERE gender = \"F\""}, {"question": "How many coaches does each club has? List the club id, name and the number of coaches.", "context": "CREATE TABLE club (club_id VARCHAR, club_name VARCHAR); CREATE TABLE coach (club_id VARCHAR)", "answer": "SELECT T1.club_id, T1.club_name, COUNT(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id"}, {"question": "How many gold medals has the club with the most coaches won?", "context": "CREATE TABLE match_result (club_id VARCHAR, gold VARCHAR); CREATE TABLE coach (club_id VARCHAR)", "answer": "SELECT T1.club_id, T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"question": "How many gymnasts are there?", "context": "CREATE TABLE gymnast (Id VARCHAR)", "answer": "SELECT COUNT(*) FROM gymnast"}, {"question": "List the total points of gymnasts in descending order.", "context": "CREATE TABLE gymnast (Total_Points VARCHAR)", "answer": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC"}, {"question": "List the total points of gymnasts in descending order of floor exercise points.", "context": "CREATE TABLE gymnast (Total_Points VARCHAR, Floor_Exercise_Points VARCHAR)", "answer": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC"}, {"question": "What is the average horizontal bar points for all gymnasts?", "context": "CREATE TABLE gymnast (Horizontal_Bar_Points INTEGER)", "answer": "SELECT AVG(Horizontal_Bar_Points) FROM gymnast"}, {"question": "What are the names of people in ascending alphabetical order?", "context": "CREATE TABLE People (Name VARCHAR)", "answer": "SELECT Name FROM People ORDER BY Name"}, {"question": "What are the names of gymnasts?", "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)", "answer": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID"}, {"question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?", "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Hometown VARCHAR)", "answer": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown <> \"Santo Domingo\""}, {"question": "What is the age of the tallest person?", "context": "CREATE TABLE people (Age VARCHAR, Height VARCHAR)", "answer": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1"}, {"question": "List the names of the top 5 oldest people.", "context": "CREATE TABLE People (Name VARCHAR, Age VARCHAR)", "answer": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5"}, {"question": "What is the total point count of the youngest gymnast?", "context": "CREATE TABLE people (People_ID VARCHAR, Age VARCHAR); CREATE TABLE gymnast (Total_Points VARCHAR, Gymnast_ID VARCHAR)", "answer": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age LIMIT 1"}, {"question": "What is the average age of all gymnasts?", "context": "CREATE TABLE people (Age INTEGER, People_ID VARCHAR); CREATE TABLE gymnast (Gymnast_ID VARCHAR)", "answer": "SELECT AVG(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID"}, {"question": "What are the distinct hometowns of gymnasts with total points more than 57.5?", "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR, Total_Points INTEGER); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)", "answer": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5"}, {"question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?", "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)", "answer": "SELECT T2.Hometown, COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown"}, {"question": "What is the most common hometown of gymnasts?", "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)", "answer": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1"}, {"question": "What are the hometowns that are shared by at least two gymnasts?", "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)", "answer": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2"}, {"question": "List the names of gymnasts in ascending order by their heights.", "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Height VARCHAR)", "answer": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height"}, {"question": "List the distinct hometowns that are not associated with any gymnast.", "context": "CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR)", "answer": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID"}, {"question": "Show the hometowns shared by people older than 23 and younger than 20.", "context": "CREATE TABLE people (Hometown VARCHAR, Age INTEGER)", "answer": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20"}, {"question": "How many distinct hometowns did these people have?", "context": "CREATE TABLE people (Hometown VARCHAR)", "answer": "SELECT COUNT(DISTINCT Hometown) FROM people"}, {"question": "Show the ages of gymnasts in descending order of total points.", "context": "CREATE TABLE people (Age VARCHAR, People_ID VARCHAR); CREATE TABLE gymnast (Gymnast_ID VARCHAR, Total_Points VARCHAR)", "answer": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC"}, {"question": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.", "context": "CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR)", "answer": "SELECT SUM(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name <> 'Brown'"}, {"question": "How many accounts are there in total?", "context": "CREATE TABLE accounts (Id VARCHAR)", "answer": "SELECT COUNT(*) FROM accounts"}, {"question": "What is the total checking balance in all accounts?", "context": "CREATE TABLE checking (balance INTEGER)", "answer": "SELECT SUM(balance) FROM checking"}, {"question": "Find the average checking balance.", "context": "CREATE TABLE checking (balance INTEGER)", "answer": "SELECT AVG(balance) FROM checking"}, {"question": "How many accounts have a savings balance above the average savings balance?", "context": "CREATE TABLE savings (balance INTEGER)", "answer": "SELECT COUNT(*) FROM savings WHERE balance > (SELECT AVG(balance) FROM savings)"}, {"question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.", "context": "CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE checking (balance INTEGER); CREATE TABLE checking (custid VARCHAR, balance INTEGER)", "answer": "SELECT T1.custid, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT MAX(balance) FROM checking)"}, {"question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?", "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (custid VARCHAR, name VARCHAR)", "answer": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%'"}, {"question": "Find the checking balance and saving balance in the Brown\u2019s account.", "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR)", "answer": "SELECT T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'"}, {"question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.", "context": "CREATE TABLE checking (custid VARCHAR, balance INTEGER); CREATE TABLE savings (custid VARCHAR, balance INTEGER); CREATE TABLE savings (balance INTEGER); CREATE TABLE checking (balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)", "answer": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM savings)"}, {"question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.", "context": "CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER)", "answer": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM savings))"}, {"question": "List all customers\u2019 names in the alphabetical order.", "context": "CREATE TABLE accounts (name VARCHAR)", "answer": "SELECT name FROM accounts ORDER BY name"}, {"question": "Find the name of account that has the lowest total checking and saving balance.", "context": "CREATE TABLE checking (custid VARCHAR, balance VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)", "answer": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1"}, {"question": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.", "context": "CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)", "answer": "SELECT T1.name, T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > (SELECT AVG(balance) FROM savings)"}, {"question": "Find the name and checking balance of the account with the lowest savings balance.", "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)", "answer": "SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1"}, {"question": "Find the number of checking accounts for each account name.", "context": "CREATE TABLE checking (custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)", "answer": "SELECT COUNT(*), T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name"}, {"question": "Find the total saving balance for each account name.", "context": "CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)", "answer": "SELECT SUM(T2.balance), T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name"}, {"question": "Find the name of accounts whose checking balance is below the average checking balance.", "context": "CREATE TABLE accounts (name VARCHAR, custid VARCHAR); CREATE TABLE checking (balance INTEGER); CREATE TABLE checking (custid VARCHAR, balance INTEGER)", "answer": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM checking)"}, {"question": "Find the saving balance of the account with the highest checking balance.", "context": "CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE checking (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (custid VARCHAR)", "answer": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1"}, {"question": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.", "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR)", "answer": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance"}, {"question": "Find the name and checking balance of the account with the lowest saving balance.", "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)", "answer": "SELECT T2.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1"}, {"question": "Find the name, checking balance and saving balance of all accounts in the bank.", "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)", "answer": "SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid"}, {"question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.", "context": "CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)", "answer": "SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance DESC"}, {"question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.", "context": "CREATE TABLE savings (custid VARCHAR, balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR); CREATE TABLE checking (custid VARCHAR, balance INTEGER)", "answer": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance"}, {"question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.", "context": "CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)", "answer": "SELECT T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance < T2.balance"}, {"question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.", "context": "CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)", "answer": "SELECT T1.name, T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance DESC LIMIT 3"}, {"question": "How many main stream browsers whose market share is at least 5 exist?", "context": "CREATE TABLE browser (market_share VARCHAR)", "answer": "SELECT COUNT(*) FROM browser WHERE market_share >= 5"}, {"question": "List the name of browsers in descending order by market share.", "context": "CREATE TABLE browser (name VARCHAR, market_share VARCHAR)", "answer": "SELECT name FROM browser ORDER BY market_share DESC"}, {"question": "List the ids, names and market shares of all browsers.", "context": "CREATE TABLE browser (id VARCHAR, name VARCHAR, market_share VARCHAR)", "answer": "SELECT id, name, market_share FROM browser"}, {"question": "What is the maximum, minimum and average market share of the listed browsers?", "context": "CREATE TABLE browser (market_share INTEGER)", "answer": "SELECT MAX(market_share), MIN(market_share), AVG(market_share) FROM browser"}, {"question": "What is the id and market share of the browser Safari?", "context": "CREATE TABLE browser (id VARCHAR, market_share VARCHAR, name VARCHAR)", "answer": "SELECT id, market_share FROM browser WHERE name = 'Safari'"}, {"question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?", "context": "CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR, CONNECTION VARCHAR)", "answer": "SELECT name, operating_system FROM web_client_accelerator WHERE CONNECTION <> 'Broadband'"}, {"question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?", "context": "CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR, accelerator_id VARCHAR, compatible_since_year VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)", "answer": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998"}, {"question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?", "context": "CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, Name VARCHAR)", "answer": "SELECT T1.id, T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2"}, {"question": "What is the id and name of the browser that is compatible with the most web accelerators?", "context": "CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR)", "answer": "SELECT T1.id, T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1"}, {"question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?", "context": "CREATE TABLE accelerator_compatible_browser (compatible_since_year VARCHAR, browser_id VARCHAR, accelerator_id VARCHAR); CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR)", "answer": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'"}, {"question": "How many different kinds of clients are supported by the web clients accelerators?", "context": "CREATE TABLE web_client_accelerator (client VARCHAR)", "answer": "SELECT COUNT(DISTINCT client) FROM web_client_accelerator"}, {"question": "How many accelerators are not compatible with the browsers listed ?", "context": "CREATE TABLE accelerator_compatible_browser (id VARCHAR, accelerator_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, accelerator_id VARCHAR)", "answer": "SELECT COUNT(*) FROM web_client_accelerator WHERE NOT id IN (SELECT accelerator_id FROM accelerator_compatible_browser)"}, {"question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?", "context": "CREATE TABLE web_client_accelerator (name VARCHAR, id VARCHAR); CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE browser (id VARCHAR, market_share INTEGER)", "answer": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15"}, {"question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.", "context": "CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)", "answer": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'"}, {"question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.", "context": "CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR); CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR, id VARCHAR)", "answer": "SELECT name, operating_system FROM web_client_accelerator EXCEPT SELECT T1.name, T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'"}, {"question": "Which accelerator name contains substring \"Opera\"?", "context": "CREATE TABLE web_client_accelerator (name VARCHAR)", "answer": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\""}, {"question": "Find the number of web accelerators used for each Operating system.", "context": "CREATE TABLE web_client_accelerator (Operating_system VARCHAR)", "answer": "SELECT Operating_system, COUNT(*) FROM web_client_accelerator GROUP BY Operating_system"}, {"question": "give me names of all compatible browsers and accelerators in the descending order of compatible year", "context": "CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR, accelerator_id VARCHAR, compatible_since_year VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, id VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)", "answer": "SELECT T2.name, T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC"}, {"question": "How many wrestlers are there?", "context": "CREATE TABLE wrestler (Id VARCHAR)", "answer": "SELECT COUNT(*) FROM wrestler"}, {"question": "List the names of wrestlers in descending order of days held.", "context": "CREATE TABLE wrestler (Name VARCHAR, Days_held VARCHAR)", "answer": "SELECT Name FROM wrestler ORDER BY Days_held DESC"}, {"question": "What is the name of the wrestler with the fewest days held?", "context": "CREATE TABLE wrestler (Name VARCHAR, Days_held VARCHAR)", "answer": "SELECT Name FROM wrestler ORDER BY Days_held LIMIT 1"}, {"question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?", "context": "CREATE TABLE wrestler (Reign VARCHAR, LOCATION VARCHAR)", "answer": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION <> \"Tokyo , Japan\""}, {"question": "What are the names and location of the wrestlers?", "context": "CREATE TABLE wrestler (Name VARCHAR, LOCATION VARCHAR)", "answer": "SELECT Name, LOCATION FROM wrestler"}, {"question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?", "context": "CREATE TABLE Elimination (Elimination_Move VARCHAR, Team VARCHAR)", "answer": "SELECT Elimination_Move FROM Elimination WHERE Team = \"Team Orton\""}, {"question": "What are the names of wrestlers and the elimination moves?", "context": "CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE elimination (Elimination_Move VARCHAR, Wrestler_ID VARCHAR)", "answer": "SELECT T2.Name, T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID"}, {"question": "List the names of wrestlers and the teams in elimination in descending order of days held.", "context": "CREATE TABLE elimination (Team VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR, Days_held VARCHAR)", "answer": "SELECT T2.Name, T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC"}, {"question": "List the time of elimination of the wrestlers with largest days held.", "context": "CREATE TABLE wrestler (Wrestler_ID VARCHAR, Days_held VARCHAR); CREATE TABLE elimination (Time VARCHAR, Wrestler_ID VARCHAR)", "answer": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1"}, {"question": "Show times of elimination of wrestlers with days held more than 50.", "context": "CREATE TABLE wrestler (Wrestler_ID VARCHAR, Days_held INTEGER); CREATE TABLE elimination (Time VARCHAR, Wrestler_ID VARCHAR)", "answer": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50"}, {"question": "Show different teams in eliminations and the number of eliminations from each team.", "context": "CREATE TABLE elimination (Team VARCHAR)", "answer": "SELECT Team, COUNT(*) FROM elimination GROUP BY Team"}, {"question": "Show teams that have suffered more than three eliminations.", "context": "CREATE TABLE elimination (Team VARCHAR)", "answer": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3"}, {"question": "Show the reign and days held of wrestlers.", "context": "CREATE TABLE wrestler (Reign VARCHAR, Days_held VARCHAR)", "answer": "SELECT Reign, Days_held FROM wrestler"}, {"question": "What are the names of wrestlers days held less than 100?", "context": "CREATE TABLE wrestler (Name VARCHAR, Days_held INTEGER)", "answer": "SELECT Name FROM wrestler WHERE Days_held < 100"}, {"question": "Please show the most common reigns of wrestlers.", "context": "CREATE TABLE wrestler (Reign VARCHAR)", "answer": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1"}, {"question": "List the locations that are shared by more than two wrestlers.", "context": "CREATE TABLE wrestler (LOCATION VARCHAR)", "answer": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2"}, {"question": "List the names of wrestlers that have not been eliminated.", "context": "CREATE TABLE elimination (Name VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR)", "answer": "SELECT Name FROM wrestler WHERE NOT Wrestler_ID IN (SELECT Wrestler_ID FROM elimination)"}, {"question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".", "context": "CREATE TABLE Elimination (Team VARCHAR, Eliminated_By VARCHAR)", "answer": "SELECT Team FROM Elimination WHERE Eliminated_By = \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = \"Benjamin\""}, {"question": "What is the number of distinct teams that suffer elimination?", "context": "CREATE TABLE elimination (team VARCHAR)", "answer": "SELECT COUNT(DISTINCT team) FROM elimination"}, {"question": "Show the times of elimination by \"Punk\" or \"Orton\".", "context": "CREATE TABLE elimination (TIME VARCHAR, Eliminated_By VARCHAR)", "answer": "SELECT TIME FROM elimination WHERE Eliminated_By = \"Punk\" OR Eliminated_By = \"Orton\""}, {"question": "How many schools are there?", "context": "CREATE TABLE school (Id VARCHAR)", "answer": "SELECT COUNT(*) FROM school"}, {"question": "Show all school names in alphabetical order.", "context": "CREATE TABLE school (school_name VARCHAR)", "answer": "SELECT school_name FROM school ORDER BY school_name"}, {"question": "List the name, location, mascot for all schools.", "context": "CREATE TABLE school (school_name VARCHAR, LOCATION VARCHAR, mascot VARCHAR)", "answer": "SELECT school_name, LOCATION, mascot FROM school"}, {"question": "What are the total and average enrollment of all schools?", "context": "CREATE TABLE school (enrollment INTEGER)", "answer": "SELECT SUM(enrollment), AVG(enrollment) FROM school"}, {"question": "What are the mascots for schools with enrollments above the average?", "context": "CREATE TABLE school (mascot VARCHAR, enrollment INTEGER)", "answer": "SELECT mascot FROM school WHERE enrollment > (SELECT AVG(enrollment) FROM school)"}, {"question": "List the name of the school with the smallest enrollment.", "context": "CREATE TABLE school (school_name VARCHAR, enrollment VARCHAR)", "answer": "SELECT school_name FROM school ORDER BY enrollment LIMIT 1"}, {"question": "Show the average, maximum, minimum enrollment of all schools.", "context": "CREATE TABLE school (enrollment INTEGER)", "answer": "SELECT AVG(enrollment), MAX(enrollment), MIN(enrollment) FROM school"}, {"question": "Show each county along with the number of schools and total enrollment in each county.", "context": "CREATE TABLE school (county VARCHAR, enrollment INTEGER)", "answer": "SELECT county, COUNT(*), SUM(enrollment) FROM school GROUP BY county"}, {"question": "How many donors have endowment for school named \"Glenn\"?", "context": "CREATE TABLE school (school_id VARCHAR, school_name VARCHAR); CREATE TABLE endowment (donator_name VARCHAR, school_id VARCHAR)", "answer": "SELECT COUNT(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = \"Glenn\""}, {"question": "List each donator name and the amount of endowment in descending order of the amount of endowment.", "context": "CREATE TABLE endowment (donator_name VARCHAR, amount INTEGER)", "answer": "SELECT donator_name, SUM(amount) FROM endowment GROUP BY donator_name ORDER BY SUM(amount) DESC"}, {"question": "List the names of the schools without any endowment.", "context": "CREATE TABLE endowment (school_name VARCHAR, school_id VARCHAR); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)", "answer": "SELECT school_name FROM school WHERE NOT school_id IN (SELECT school_id FROM endowment)"}, {"question": "List all the names of schools with an endowment amount smaller than or equal to 10.", "context": "CREATE TABLE school (school_name VARCHAR, school_id VARCHAR); CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)", "answer": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T1.school_id HAVING SUM(T1.amount) <= 10"}, {"question": "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"", "context": "CREATE TABLE school (school_id VARCHAR, school_name VARCHAR); CREATE TABLE endowment (donator_name VARCHAR, school_id VARCHAR)", "answer": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Triton'"}, {"question": "Show the names of all the donors except those whose donation amount less than 9.", "context": "CREATE TABLE endowment (donator_name VARCHAR, amount INTEGER)", "answer": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9"}, {"question": "List the amount and donor name for the largest amount of donation.", "context": "CREATE TABLE endowment (amount VARCHAR, donator_name VARCHAR)", "answer": "SELECT amount, donator_name FROM endowment ORDER BY amount DESC LIMIT 1"}, {"question": "How many budgets are above 3000 in year 2001 or before?", "context": "CREATE TABLE budget (budgeted VARCHAR, YEAR VARCHAR)", "answer": "SELECT COUNT(*) FROM budget WHERE budgeted > 3000 AND YEAR <= 2001"}, {"question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.", "context": "CREATE TABLE budget (budgeted VARCHAR, invested VARCHAR, school_id VARCHAR, year VARCHAR); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)", "answer": "SELECT T2.school_name, T1.budgeted, T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.year >= 2002"}, {"question": "Show all donor names.", "context": "CREATE TABLE endowment (donator_name VARCHAR)", "answer": "SELECT DISTINCT donator_name FROM endowment"}, {"question": "How many budget record has a budget amount smaller than the invested amount?", "context": "CREATE TABLE budget (budgeted INTEGER, invested VARCHAR)", "answer": "SELECT COUNT(*) FROM budget WHERE budgeted < invested"}, {"question": "What is the total budget amount for school \"Glenn\" in all years?", "context": "CREATE TABLE budget (budgeted INTEGER, school_id VARCHAR); CREATE TABLE school (school_id VARCHAR, school_name VARCHAR)", "answer": "SELECT SUM(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn'"}, {"question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.", "context": "CREATE TABLE endowment (school_id VARCHAR, amount INTEGER); CREATE TABLE budget (school_id VARCHAR, budgeted INTEGER); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)", "answer": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id GROUP BY T2.school_name HAVING SUM(T1.budgeted) > 100 OR SUM(T3.amount) > 10"}, {"question": "Find the names of schools that have more than one donator with donation amount above 8.5.", "context": "CREATE TABLE school (School_name VARCHAR, school_id VARCHAR); CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)", "answer": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.amount > 8.5 GROUP BY T1.school_id HAVING COUNT(*) > 1"}, {"question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.", "context": "CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)", "answer": "SELECT COUNT(*) FROM (SELECT * FROM endowment WHERE amount > 8.5 GROUP BY school_id HAVING COUNT(*) > 1)"}, {"question": "List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.", "context": "CREATE TABLE school (School_name VARCHAR, Mascot VARCHAR, IHSAA_Football_Class VARCHAR, school_id VARCHAR); CREATE TABLE budget (school_id VARCHAR, total_budget_percent_invested VARCHAR, total_budget_percent_budgeted VARCHAR)", "answer": "SELECT T1.School_name, T1.Mascot, T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id = T2.school_id WHERE Budgeted > 6000 OR YEAR < 2003 ORDER BY T2.total_budget_percent_invested, T2.total_budget_percent_budgeted"}, {"question": "How many buildings are there?", "context": "CREATE TABLE building (Id VARCHAR)", "answer": "SELECT COUNT(*) FROM building"}, {"question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.", "context": "CREATE TABLE building (name VARCHAR, street_address VARCHAR, floors VARCHAR)", "answer": "SELECT name, street_address, floors FROM building ORDER BY floors"}, {"question": "What is the name of the tallest building?", "context": "CREATE TABLE building (name VARCHAR, height_feet VARCHAR)", "answer": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1"}, {"question": "What are the average, maximum, and minimum number of floors for all buildings?", "context": "CREATE TABLE building (floors INTEGER)", "answer": "SELECT AVG(floors), MAX(floors), MIN(floors) FROM building"}, {"question": "Show the number of buildings with a height above the average or a number of floors above the average.", "context": "CREATE TABLE building (height_feet INTEGER, floors INTEGER)", "answer": "SELECT COUNT(*) FROM building WHERE height_feet > (SELECT AVG(height_feet) FROM building) OR floors > (SELECT AVG(floors) FROM building)"}, {"question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.", "context": "CREATE TABLE building (name VARCHAR, height_feet VARCHAR, floors VARCHAR)", "answer": "SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20"}, {"question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".", "context": "CREATE TABLE institution (institution VARCHAR, LOCATION VARCHAR, founded VARCHAR, TYPE VARCHAR)", "answer": "SELECT institution, LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'"}, {"question": "Show institution types, along with the number of institutions and total enrollment for each type.", "context": "CREATE TABLE institution (TYPE VARCHAR, enrollment INTEGER)", "answer": "SELECT TYPE, COUNT(*), SUM(enrollment) FROM institution GROUP BY TYPE"}, {"question": "Show the institution type with the largest number of institutions.", "context": "CREATE TABLE institution (TYPE VARCHAR)", "answer": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1"}, {"question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.", "context": "CREATE TABLE institution (TYPE VARCHAR, founded VARCHAR, enrollment VARCHAR)", "answer": "SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000"}, {"question": "Show the name of buildings that do not have any institution.", "context": "CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE institution (name VARCHAR, building_id VARCHAR)", "answer": "SELECT name FROM building WHERE NOT building_id IN (SELECT building_id FROM institution)"}, {"question": "Show the names of buildings except for those having an institution founded in 2003.", "context": "CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE building (name VARCHAR); CREATE TABLE institution (building_id VARCHAR, founded VARCHAR)", "answer": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003"}, {"question": "For each building, show the name of the building and the number of institutions in it.", "context": "CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE institution (building_id VARCHAR)", "answer": "SELECT T1.name, COUNT(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id"}, {"question": "Show the names and heights of buildings with at least two institutions founded after 1880.", "context": "CREATE TABLE building (name VARCHAR, height_feet VARCHAR, building_id VARCHAR); CREATE TABLE institution (building_id VARCHAR, founded INTEGER)", "answer": "SELECT T1.name, T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING COUNT(*) >= 2"}, {"question": "Show all the distinct institution types.", "context": "CREATE TABLE institution (TYPE VARCHAR)", "answer": "SELECT DISTINCT TYPE FROM institution"}, {"question": "Show institution names along with the number of proteins for each institution.", "context": "CREATE TABLE institution (institution VARCHAR, institution_id VARCHAR); CREATE TABLE protein (institution_id VARCHAR)", "answer": "SELECT T1.institution, COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id"}, {"question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?", "context": "CREATE TABLE institution (institution_id VARCHAR, founded VARCHAR, type VARCHAR); CREATE TABLE protein (institution_id VARCHAR)", "answer": "SELECT COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private'"}, {"question": "Show the protein name and the institution name.", "context": "CREATE TABLE institution (institution VARCHAR, institution_id VARCHAR); CREATE TABLE protein (protein_name VARCHAR, institution_id VARCHAR)", "answer": "SELECT T2.protein_name, T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id"}, {"question": "How many proteins are associated with an institution in a building with at least 20 floors?", "context": "CREATE TABLE institution (institution_id VARCHAR, building_id VARCHAR); CREATE TABLE building (building_id VARCHAR, floors VARCHAR); CREATE TABLE protein (institution_id VARCHAR)", "answer": "SELECT COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20"}, {"question": "How many institutions do not have an associated protein in our record?", "context": "CREATE TABLE protein (institution_id VARCHAR); CREATE TABLE institution (institution_id VARCHAR)", "answer": "SELECT COUNT(*) FROM institution WHERE NOT institution_id IN (SELECT institution_id FROM protein)"}, {"question": "Show all the locations where no cinema has capacity over 800.", "context": "CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)", "answer": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800"}, {"question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.", "context": "CREATE TABLE cinema (LOCATION VARCHAR, openning_year VARCHAR)", "answer": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011"}, {"question": "How many cinema do we have?", "context": "CREATE TABLE cinema (Id VARCHAR)", "answer": "SELECT COUNT(*) FROM cinema"}, {"question": "Show name, opening year, and capacity for each cinema.", "context": "CREATE TABLE cinema (name VARCHAR, openning_year VARCHAR, capacity VARCHAR)", "answer": "SELECT name, openning_year, capacity FROM cinema"}, {"question": "Show the cinema name and location for cinemas with capacity above average.", "context": "CREATE TABLE cinema (name VARCHAR, LOCATION VARCHAR, capacity INTEGER)", "answer": "SELECT name, LOCATION FROM cinema WHERE capacity > (SELECT AVG(capacity) FROM cinema)"}, {"question": "What are all the locations with a cinema?", "context": "CREATE TABLE cinema (LOCATION VARCHAR)", "answer": "SELECT DISTINCT LOCATION FROM cinema"}, {"question": "Show all the cinema names and opening years in descending order of opening year.", "context": "CREATE TABLE cinema (name VARCHAR, openning_year VARCHAR)", "answer": "SELECT name, openning_year FROM cinema ORDER BY openning_year DESC"}, {"question": "What are the name and location of the cinema with the largest capacity?", "context": "CREATE TABLE cinema (name VARCHAR, LOCATION VARCHAR, capacity VARCHAR)", "answer": "SELECT name, LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1"}, {"question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.", "context": "CREATE TABLE cinema (capacity INTEGER, openning_year VARCHAR)", "answer": "SELECT AVG(capacity), MIN(capacity), MAX(capacity) FROM cinema WHERE openning_year >= 2011"}, {"question": "Show each location and the number of cinemas there.", "context": "CREATE TABLE cinema (LOCATION VARCHAR)", "answer": "SELECT LOCATION, COUNT(*) FROM cinema GROUP BY LOCATION"}, {"question": "What is the location with the most cinemas opened in year 2010 or later?", "context": "CREATE TABLE cinema (LOCATION VARCHAR, openning_year VARCHAR)", "answer": "SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1"}, {"question": "Show all the locations with at least two cinemas with capacity above 300.", "context": "CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)", "answer": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) >= 2"}, {"question": "Show the title and director for all films.", "context": "CREATE TABLE film (title VARCHAR, directed_by VARCHAR)", "answer": "SELECT title, directed_by FROM film"}, {"question": "Show all directors.", "context": "CREATE TABLE film (directed_by VARCHAR)", "answer": "SELECT DISTINCT directed_by FROM film"}, {"question": "List all directors along with the number of films directed by each director.", "context": "CREATE TABLE film (directed_by VARCHAR)", "answer": "SELECT directed_by, COUNT(*) FROM film GROUP BY directed_by"}, {"question": "What is total number of show times per dat for each cinema?", "context": "CREATE TABLE schedule (show_times_per_day INTEGER, cinema_id VARCHAR); CREATE TABLE cinema (name VARCHAR, cinema_id VARCHAR)", "answer": "SELECT T2.name, SUM(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id"}, {"question": "What are the title and maximum price of each film?", "context": "CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE schedule (price INTEGER, film_id VARCHAR)", "answer": "SELECT T2.title, MAX(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id"}, {"question": "Show cinema name, film title, date, and price for each record in schedule.", "context": "CREATE TABLE schedule (date VARCHAR, price VARCHAR, film_id VARCHAR, cinema_id VARCHAR); CREATE TABLE cinema (name VARCHAR, cinema_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR)", "answer": "SELECT T3.name, T2.title, T1.date, T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id"}, {"question": "What are the title and director of the films without any schedule?", "context": "CREATE TABLE schedule (title VARCHAR, directed_by VARCHAR, film_id VARCHAR); CREATE TABLE film (title VARCHAR, directed_by VARCHAR, film_id VARCHAR)", "answer": "SELECT title, directed_by FROM film WHERE NOT film_id IN (SELECT film_id FROM schedule)"}, {"question": "Show director with the largest number of show times in total.", "context": "CREATE TABLE schedule (film_id VARCHAR, show_times_per_day INTEGER); CREATE TABLE film (directed_by VARCHAR, film_id VARCHAR)", "answer": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY SUM(T1.show_times_per_day) DESC LIMIT 1"}, {"question": "Find the locations that have more than one movie theater with capacity above 300.", "context": "CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)", "answer": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) > 1"}, {"question": "How many films have the word 'Dummy' in their titles?", "context": "CREATE TABLE film (title VARCHAR)", "answer": "SELECT COUNT(*) FROM film WHERE title LIKE \"%Dummy%\""}, {"question": "Are the customers holding coupons with amount 500 bad or good?", "context": "CREATE TABLE discount_coupons (coupon_id VARCHAR, coupon_amount VARCHAR); CREATE TABLE customers (good_or_bad_customer VARCHAR, coupon_id VARCHAR)", "answer": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500"}, {"question": "How many bookings did each customer make? List the customer id, first name, and the count.", "context": "CREATE TABLE bookings (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR)", "answer": "SELECT T1.customer_id, T1.first_name, COUNT(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"}, {"question": "What is the maximum total amount paid by a customer? List the customer id and amount.", "context": "CREATE TABLE Payments (customer_id VARCHAR, amount_paid INTEGER)", "answer": "SELECT customer_id, SUM(amount_paid) FROM Payments GROUP BY customer_id ORDER BY SUM(amount_paid) DESC LIMIT 1"}, {"question": "What are the id and the amount of refund of the booking that incurred the most times of payments?", "context": "CREATE TABLE Payments (booking_id VARCHAR); CREATE TABLE Bookings (booking_id VARCHAR, amount_of_refund VARCHAR)", "answer": "SELECT T1.booking_id, T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T1.booking_id ORDER BY COUNT(*) DESC LIMIT 1"}, {"question": "What is the id of the product that is booked for 3 times?", "context": "CREATE TABLE products_booked (product_id VARCHAR)", "answer": "SELECT product_id FROM products_booked GROUP BY product_id HAVING COUNT(*) = 3"}, {"question": "What is the product description of the product booked with an amount of 102.76?", "context": "CREATE TABLE products_for_hire (product_description VARCHAR, product_id VARCHAR); CREATE TABLE products_booked (product_id VARCHAR, booked_amount VARCHAR)", "answer": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76"}, {"question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?", "context": "CREATE TABLE bookings (booking_start_date VARCHAR, booking_end_date VARCHAR, booking_id VARCHAR); CREATE TABLE products_booked (product_id VARCHAR, booking_id VARCHAR); CREATE TABLE Products_for_hire (product_id VARCHAR, product_name VARCHAR)", "answer": "SELECT T3.booking_start_date, T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id WHERE T1.product_name = 'Book collection A'"}, {"question": "What are the names of products whose availability equals to 1?", "context": "CREATE TABLE view_product_availability (product_id VARCHAR, available_yn VARCHAR); CREATE TABLE products_for_hire (product_name VARCHAR, product_id VARCHAR)", "answer": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.available_yn = 1"}, {"question": "How many different product types are there?", "context": "CREATE TABLE products_for_hire (product_type_code VARCHAR)", "answer": "SELECT COUNT(DISTINCT product_type_code) FROM products_for_hire"}, {"question": "What are the first name, last name, and gender of all the good customers? Order by their last name.", "context": "CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, gender_mf VARCHAR, good_or_bad_customer VARCHAR)", "answer": "SELECT first_name, last_name, gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name"}, {"question": "What is the average amount due for all the payments?", "context": "CREATE TABLE payments (amount_due INTEGER)", "answer": "SELECT AVG(amount_due) FROM payments"}, {"question": "What are the maximum, minimum, and average booked count for the products booked?", "context": "CREATE TABLE products_booked (booked_count INTEGER)", "answer": "SELECT MAX(booked_count), MIN(booked_count), AVG(booked_count) FROM products_booked"}, {"question": "What are all the distinct payment types?", "context": "CREATE TABLE payments (payment_type_code VARCHAR)", "answer": "SELECT DISTINCT payment_type_code FROM payments"}, {"question": "What are the daily hire costs for the products with substring 'Book' in its name?", "context": "CREATE TABLE Products_for_hire (daily_hire_cost VARCHAR, product_name VARCHAR)", "answer": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'"}, {"question": "How many products are never booked with amount higher than 200?", "context": "CREATE TABLE products_booked (product_id VARCHAR, booked_amount INTEGER); CREATE TABLE Products_for_hire (product_id VARCHAR, booked_amount INTEGER)", "answer": "SELECT COUNT(*) FROM Products_for_hire WHERE NOT product_id IN (SELECT product_id FROM products_booked WHERE booked_amount > 200)"}, {"question": "What are the coupon amount of the coupons owned by both good and bad customers?", "context": "CREATE TABLE Discount_Coupons (coupon_amount VARCHAR, coupon_id VARCHAR); CREATE TABLE customers (coupon_id VARCHAR, good_or_bad_customer VARCHAR)", "answer": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'"}, {"question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'", "context": "CREATE TABLE payments (payment_date VARCHAR, amount_paid VARCHAR, payment_type_code VARCHAR)", "answer": "SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'"}, {"question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?", "context": "CREATE TABLE products_for_hire (product_name VARCHAR, product_description VARCHAR, product_type_code VARCHAR, daily_hire_cost VARCHAR)", "answer": "SELECT product_name, product_description FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20"}, {"question": "How many phones are there?", "context": "CREATE TABLE phone (Id VARCHAR)", "answer": "SELECT COUNT(*) FROM phone"}, {"question": "List the names of phones in ascending order of price.", "context": "CREATE TABLE phone (Name VARCHAR, Price VARCHAR)", "answer": "SELECT Name FROM phone ORDER BY Price"}, {"question": "What are the memories and carriers of phones?", "context": "CREATE TABLE phone (Memory_in_G VARCHAR, Carrier VARCHAR)", "answer": "SELECT Memory_in_G, Carrier FROM phone"}, {"question": "List the distinct carriers of phones with memories bigger than 32.", "context": "CREATE TABLE phone (Carrier VARCHAR, Memory_in_G INTEGER)", "answer": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > 32"}, {"question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".", "context": "CREATE TABLE phone (Name VARCHAR, Carrier VARCHAR)", "answer": "SELECT Name FROM phone WHERE Carrier = \"Sprint\" OR Carrier = \"TMobile\""}, {"question": "What is the carrier of the most expensive phone?", "context": "CREATE TABLE phone (Carrier VARCHAR, Price VARCHAR)", "answer": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1"}, {"question": "Show different carriers of phones together with the number of phones with each carrier.", "context": "CREATE TABLE phone (Carrier VARCHAR)", "answer": "SELECT Carrier, COUNT(*) FROM phone GROUP BY Carrier"}, {"question": "Show the most frequently used carrier of the phones.", "context": "CREATE TABLE phone (Carrier VARCHAR)", "answer": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1"}, {"question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.", "context": "CREATE TABLE phone (Carrier VARCHAR, Memory_in_G INTEGER)", "answer": "SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64"}, {"question": "Show the names of phones and the districts of markets they are on.", "context": "CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE market (District VARCHAR, Market_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)", "answer": "SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID"}, {"question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.", "context": "CREATE TABLE market (District VARCHAR, Market_ID VARCHAR, Ranking VARCHAR); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)", "answer": "SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID ORDER BY T2.Ranking"}, {"question": "Show the names of phones that are on market with number of shops greater than 50.", "context": "CREATE TABLE market (Market_ID VARCHAR, Num_of_shops INTEGER); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)", "answer": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.Num_of_shops > 50"}, {"question": "For each phone, show its names and total number of stocks.", "context": "CREATE TABLE phone_market (Num_of_stock INTEGER, Phone_ID VARCHAR); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR)", "answer": "SELECT T2.Name, SUM(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name"}, {"question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.", "context": "CREATE TABLE phone_market (Phone_ID VARCHAR, Num_of_stock INTEGER); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR)", "answer": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING SUM(T1.Num_of_stock) >= 2000 ORDER BY SUM(T1.Num_of_stock) DESC"}, {"question": "List the names of phones that are not on any market.", "context": "CREATE TABLE phone (Name VARCHAR, Phone_id VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Name VARCHAR, Phone_id VARCHAR, Phone_ID VARCHAR)", "answer": "SELECT Name FROM phone WHERE NOT Phone_id IN (SELECT Phone_ID FROM phone_market)"}, {"question": "How many gas companies are there?", "context": "CREATE TABLE company (Id VARCHAR)", "answer": "SELECT COUNT(*) FROM company"}, {"question": "List the company name and rank for all companies in the decreasing order of their sales.", "context": "CREATE TABLE company (company VARCHAR, rank VARCHAR, Sales_billion VARCHAR)", "answer": "SELECT company, rank FROM company ORDER BY Sales_billion DESC"}, {"question": "Show the company name and the main industry for all companies whose headquarters are not from USA.", "context": "CREATE TABLE company (company VARCHAR, main_industry VARCHAR, headquarters VARCHAR)", "answer": "SELECT company, main_industry FROM company WHERE headquarters <> 'USA'"}, {"question": "Show all company names and headquarters in the descending order of market value.", "context": "CREATE TABLE company (company VARCHAR, headquarters VARCHAR, market_value VARCHAR)", "answer": "SELECT company, headquarters FROM company ORDER BY market_value DESC"}, {"question": "Show minimum, maximum, and average market value for all companies.", "context": "CREATE TABLE company (market_value INTEGER)", "answer": "SELECT MIN(market_value), MAX(market_value), AVG(market_value) FROM company"}, {"question": "Show all main industry for all companies.", "context": "CREATE TABLE company (main_industry VARCHAR)", "answer": "SELECT DISTINCT main_industry FROM company"}, {"question": "List all headquarters and the number of companies in each headquarter.", "context": "CREATE TABLE company (headquarters VARCHAR)", "answer": "SELECT headquarters, COUNT(*) FROM company GROUP BY headquarters"}, {"question": "Show all main industry and total market value in each industry.", "context": "CREATE TABLE company (main_industry VARCHAR, market_value INTEGER)", "answer": "SELECT main_industry, SUM(market_value) FROM company GROUP BY main_industry"}, {"question": "List the main industry with highest total market value and its number of companies.", "context": "CREATE TABLE company (main_industry VARCHAR, market_value INTEGER)", "answer": "SELECT main_industry, COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1"}, {"question": "Show headquarters with at least two companies in the banking industry.", "context": "CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)", "answer": "SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING COUNT(*) >= 2"}]